@page "/cart"
@using Layout_Client.Model.DTO
@using Layout_Client.Service
@inject CartService CartService
@inject UserService UserService

@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="container py-4">
    <h2 class="mb-4 fw-bold text-primary"><i class="bi bi-cart4"></i> Gi·ªè h√†ng c·ªßa b·∫°n</h2>

    @if (cartItems.Count == 0)
    {
        <div class="alert alert-info shadow-sm rounded">üõí Ch∆∞a c√≥ m√≥n n√†o trong gi·ªè h√†ng.</div>
    }
    else
    {
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-hover align-middle text-center border">
                <thead class="table-primary">
                    <tr>
                        <th>H√¨nh ·∫£nh</th>
                        <th class="text-start">T√™n m√≥n</th>
                        <th>Gi√°</th>
                        <th>S·ªë l∆∞·ª£ng</th>
                        <th>T·ªïng</th>
                        <th>Thao t√°c</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in cartItems)
                    {
                        <tr>
                            <td>
                                <img src="@item.ImageUrl" alt="@item.Name" class="rounded" style="width: 60px; height: 60px; object-fit: cover;" />
                            </td>
                            <td class="text-start fw-medium">@item.Name</td>
                            <td>@item.SellingPrice.ToString("N0") ƒë</td>
                            <td>
                                <div class="d-flex justify-content-center align-items-center gap-2">
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => ChangeQuantity(item.MenuItemID, -1)">‚àí</button>
                                    <span class="fw-semibold">@item.Quantity</span>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => ChangeQuantity(item.MenuItemID, 1)">+</button>
                                </div>
                            </td>
                            <td class="fw-bold text-danger">@((item.SellingPrice * item.Quantity).ToString("N0")) ƒë</td>
                            <td>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmRemove(item.MenuItemID)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- M√£ gi·∫£m gi√° v√† t·ªïng ti·ªÅn -->
        <div class="row mt-4">>

            <div class="col-md-6 text-end">
                <div class="border p-3 rounded shadow-sm">
                    <div class="d-flex justify-content-between">
                        <span class="fw-semibold">T·∫°m t√≠nh:</span>
                        <span>@cartItems.Sum(i => i.SellingPrice * i.Quantity).ToString("N0") ƒë</span>
                    </div>
                    <div class="d-flex justify-content-between text-success">
                        <span class="fw-semibold">Gi·∫£m gi√°:</span>
                        <span>@discountAmount.ToString("N0") ƒë</span>
                    </div>
                    <hr />
                    <div class="d-flex justify-content-between fw-bold fs-5 text-danger">
                        <span>T·ªïng c·ªông:</span>
                        <span>@finalTotal.ToString("N0") ƒë</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="text-end mt-4">
            <button class="btn btn-success btn-lg px-4 shadow" @onclick="PlaceOrder">
                üßæ Ti·∫øn h√†nh ƒë·∫∑t h√†ng
            </button>
        </div>
    }
</div>

<!-- Toast notification -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 9999">
    <div class="toast align-items-center text-white bg-success border-0" id="toastNotification" role="alert">
        <div class="d-flex">
            <div class="toast-body" id="toastBody">Th√†nh c√¥ng!</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
</div>

@code {
    private List<CartItemDTO> cartItems = new();
    private string promoCode = "";
    private string promoMessage = "";
    private decimal discountAmount = 0;
    private decimal finalTotal => cartItems.Sum(i => i.SellingPrice * i.Quantity) - discountAmount;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartAsync();
    }

    private async Task ConfirmRemove(int menuItemId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° m√≥n n√†y?");
        if (confirmed)
        {
            await Remove(menuItemId);
        }
    }

    private async Task Remove(int menuItemId)
    {
        await CartService.RemoveFromCartAsync(menuItemId);
        cartItems = await CartService.GetCartAsync();
        StateHasChanged();
    }

    private async Task ChangeQuantity(int menuItemId, int change)
    {
        var item = cartItems.FirstOrDefault(i => i.MenuItemID == menuItemId);
        if (item != null)
        {
            item.Quantity = Math.Max(1, item.Quantity + change);
            await CartService.SaveCartAsync(cartItems);
            StateHasChanged();
        }
    }
    
    private async void PlaceOrder()
    {
        var user = await UserService.GetCurrentUserAsync();
        if (user == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        ShowToast("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
        Navigation.NavigateTo("/checkout");
    }

    private async void ShowToast(string message)
    {
        await JS.InvokeVoidAsync("showToast", message);
    }
}
