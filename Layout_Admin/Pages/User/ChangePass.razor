@page "/set-password"
@using Layout_Admin.Model.DTO
@using Layout_Admin.Service
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Navigation
@inject UserService UserService

<h3 class="text-center mb-4">üîê ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi</h3>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-body">
                    @if (string.IsNullOrEmpty(token))
                    {
                        <div class="alert alert-danger">Li√™n k·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.</div>
                    }
                    else if (isSuccess)
                    {
                        <div class="alert alert-success">@message</div>
                        <a href="/login" class="btn btn-success w-100 mt-3">ƒêƒÉng nh·∫≠p</a>
                    }
                    else
                    {
                        <div class="form-group mb-3">
                            <label for="password">M·∫≠t kh·∫©u m·ªõi</label>
                            <input @bind="password" type="password" class="form-control" id="password" placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                            <input @bind="confirmPassword" type="password" class="form-control" id="confirmPassword" placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u" />
                        </div>

                        @if (!string.IsNullOrEmpty(message) && !isSuccess)
                        {
                            <div class="alert alert-danger">@message</div>
                        }

                        <button @onclick="HandleSubmit" class="btn btn-primary w-100" disabled="@isSubmitting">
                            @(isSubmitting ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n")
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string token = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string message = string.Empty;
    private bool isSubmitting = false;
    private bool isSuccess = false;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("token", out var t))
        {
            token = t!;
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(password) || string.IsNullOrEmpty(confirmPassword))
        {
            message = "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u.";
            return;
        }
        if (password != confirmPassword)
        {
            message = "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.";
            return;
        }

        isSubmitting = true;
        message = string.Empty;

        var dto = new ResetPassDTO
        {
            ResetToken = token,
            NewPassword = password
        };

        var result = await UserService.ResetPasswordAsync(dto);
        if (result)
        {
            isSuccess = true;
            message = "ƒê·∫∑t m·∫≠t kh·∫©u th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p...";
            await Task.Delay(3000);
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        else
        {
            message = "ƒê·∫∑t m·∫≠t kh·∫©u th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i li√™n k·∫øt ho·∫∑c th·ª≠ l·∫°i sau.";
        }

        isSubmitting = false;
    }

}
