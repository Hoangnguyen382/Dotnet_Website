@page "/orders"
@using Layout_Admin.Model.DTO
@using Layout_Admin.Service
@inject MenuItemService MenuItemService

@inject UserService UserService
@inject OrderService OrderService
@inject IJSRuntime JS

<h3 class="text-center mb-4">üßæ Danh s√°ch ƒë∆°n h√†ng c·ªßa b·∫°n</h3>

@if (orders == null)
{
    <div class="text-center text-secondary">ƒêang t·∫£i ƒë∆°n h√†ng...</div>
}
else if (!orders.Any())
{
    <div class="text-center text-muted">B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-bordered shadow-sm rounded">
            <thead class="table-primary text-center">
                <tr>
                    <th>M√£ ƒê∆°n</th>      
                    <th>SDT</th>
                    <th>ƒê·ªãa ch·ªâ</th>
                    <th>Ng√†y ƒë·∫∑t</th>
                    <th>T·ªïng Ti·ªÅn</th>
                    <th>Thanh to√°n</th>
                    <th>Ghi ch√∫</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>H√†nh ƒë·ªông</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr class="align-middle text-center">
                        <td>@order.OrderID</td>
                        <td>@order.PhoneNumber</td>
                        <td>@order.DeliveryAddress</td>
                        <td>@order.OrderDate.ToString("dd/MM/yyyy")</td>
                        <td class="text-danger fw-bold">@order.TotalAmount.ToString("N0") ƒë</td>
                        <td>@order.PaymentMethod</td>
                        <td>@order.Note</td>
                        <td>
                            <select class="form-select form-select-sm"
                                @onchange="async e => await UpdateStatusAsync(order.OrderID, e.Value.ToString())">
                                @foreach (var status in GetNextPossibleStatuses(order.Status))
                                {
                                    <option value="@status" selected="@(status == order.Status)">@status</option>
                                }
                            </select>

                        </td>
                        <td class="d-flex flex-column gap-1">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowOrderDetails(order.OrderID)">
                                Xem chi ti·∫øt
                            </button>
                            
                            
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
}

<!-- Modal hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng -->
@if (selectedOrderDetails != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content border-0 shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">üõí Chi ti·∫øt ƒë∆°n h√†ng #@selectedOrderId</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-sm table-bordered">
                        <thead class="table-light text-center">
                            <tr>
                                <th>T√™n m√≥n</th>
                                <th>H√¨nh ·∫¢nh</th>
                                <th>S·ªë l∆∞·ª£ng</th>
                                <th>ƒê∆°n gi√°</th>
                                <th>Th√†nh ti·ªÅn</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in selectedOrderDetails)
                            {
                                <tr>
                                    <td>@item.MenuItemName</td>
                                    <td>
                                        <div class="d-flex align-items-center gap-2">
                                            <img src="@item.ImageUrl" alt="@item.MenuItemName" style="width: 40px; height: 40px; object-fit: cover;" class="rounded" />
                                        </div>
                                    </td>
                                    <td class="text-center">@item.Quantity</td>
                                    <td class="text-end">@item.UnitPrice.ToString("N0") ƒë</td>
                                    <td class="text-end text-danger fw-semibold">
                                        @((item.UnitPrice * item.Quantity).ToString("N0")) ƒë
                                    </td>
                                </tr>
                            }
                            <tr class="fw-bold">
                                <td colspan="4" class="text-end">T·ªïng c·ªông:</td>
                                <td class="text-end text-danger">
                                    @selectedOrderDetails.Sum(i => i.UnitPrice * i.Quantity).ToString("N0") ƒë
                                </td>
                            </tr>
                        </tbody>

                    </table>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">ƒê√≥ng</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<OrderResponseDTO>? orders;
    private OrderRequestDTO? orderRequest;
    private List<OrderDetailResponseDTO>? selectedOrderDetails;
    private int selectedOrderId;
    private int restaurantId { get; set; }
    private List<string> statuses = new() { "Pending", "Processing", "Completed" };

    protected override async Task OnInitializedAsync()
    {
        if (restaurantId == 0)
        {
            var user = await UserService.GetCurrentUserAsync();
            if (user == null || user.RestaurantID == null)
            {
                await JS.InvokeVoidAsync("alert", "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh nh√† h√†ng!");
                return;
            }
            restaurantId = user.RestaurantID;
        }
        orders = await OrderService.GetOrderByRestaurantIdAsync(restaurantId);
        StateHasChanged();
    }
    private async Task ShowOrderDetails(int orderId)
    {
        selectedOrderId = orderId;

        var details = await OrderService.GetOrderDetailByOrderIdAsync(orderId);
        selectedOrderDetails = new();

        foreach (var item in details)
        {
            var menuItem = await MenuItemService.GetByIdAsync(item.MenuItemID);
            selectedOrderDetails.Add(new OrderDetailResponseDTO
            {
                MenuItemID = item.MenuItemID,
                MenuItemName = menuItem?.Name ?? $"M√≥n #{item.MenuItemID}",
                ImageUrl = menuItem?.ImageUrl,
                Quantity = item.Quantity,
                UnitPrice = item.UnitPrice
            });
        }
    }
    private async Task UpdateStatusAsync(int orderId, string newStatus)
    {
        var order = orders.FirstOrDefault(o => o.OrderID == orderId);
        if (order == null)
        {
            await JS.InvokeVoidAsync("alert", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
            return;
        }

        var updateDto = new OrderRequestDTO
        {
            DeliveryAddress = order.DeliveryAddress,
            PhoneNumber = order.PhoneNumber,
            PaymentMethod = order.PaymentMethod,
            PaymentStatus = order.PaymentStatus,
            Note = order.Note,
            Status = newStatus
        };

        var result = await OrderService.UpdateOrderAsync(orderId, updateDto);
        if (result)
        {
            order.Status = newStatus; // C·∫≠p nh·∫≠t trong UI
            await JS.InvokeVoidAsync("alert", $"‚úÖ Tr·∫°ng th√°i ƒë∆°n h√†ng #{orderId} ƒë√£ c·∫≠p nh·∫≠t th√†nh: {newStatus}");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i");
        }
    }
    private List<string> GetNextPossibleStatuses(string currentStatus)
    {
        return currentStatus switch
        {
            "Pending" => new() { "Pending", "Processing" },
            "Processing" => new() { "Processing", "Complete" },
            "Complete" => new() { "Complete" }, 
            _ => new() { currentStatus }
        };
    }
    private void CloseModal()
    {
        selectedOrderDetails = null;
    }
}

