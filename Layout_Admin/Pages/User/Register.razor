@page "/register"
@using Layout_Admin.Model.DTO
@using Layout_Admin.Service
@inject UserService UserService
@inject NavigationManager Navigation

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0 fw-bold">
                        <i class="fas fa-user-plus me-2"></i> ƒêƒÇNG K√ù T√ÄI KHO·∫¢N
                    </h4>
                </div>
                <div class="card-body p-4">
                    <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">H·ªç v√† t√™n <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-user"></i></span>
                                <InputText class="form-control" @bind-Value="registerModel.Name" placeholder="Nh·∫≠p h·ªç v√† t√™n" />
                            </div>
                            <ValidationMessage For="@(() => registerModel.Name)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                <InputText class="form-control" @bind-Value="registerModel.Email" placeholder="Nh·∫≠p email" />
                            </div>
                            <ValidationMessage For="@(() => registerModel.Email)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">M·∫≠t kh·∫©u <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                                <InputText class="form-control" type="password" @bind-Value="registerModel.Password" placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
                            </div>
                            <ValidationMessage For="@(() => registerModel.Password)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">X√°c nh·∫≠n m·∫≠t kh·∫©u <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                                <InputText class="form-control" type="password" @bind-Value="confirmPassword" placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u" />
                            </div>
                            @if (!string.IsNullOrEmpty(passwordMismatchError))
                            {
                                <div class="text-danger small">@passwordMismatchError</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Vai tr√≤ <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-user-tag"></i></span>
                                <InputSelect class="form-select" @bind-Value="registerModel.Role">
                                    <option value="">-- Ch·ªçn vai tr√≤ --</option>
                                    <option value="Admin">Admin</option>
                                    <option value="User">User</option>
                                    <option value="Manager">Manager</option>
                                </InputSelect>
                            </div>
                            <ValidationMessage For="@(() => registerModel.Role)" class="text-danger small" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger text-center">@errorMessage</div>
                        }
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success text-center">@successMessage</div>
                        }

                        <div class="d-grid mt-4">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-user-plus me-2"></i> ƒêƒÉng k√Ω
                            </button>
                        </div>
                    </EditForm>

                    <div class="text-center mt-3">
                        <p>ƒê√£ c√≥ t√†i kho·∫£n? <a href="/login" class="text-decoration-none text-primary">ƒêƒÉng nh·∫≠p</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserDTO registerModel = new();
    private string confirmPassword = "";
    private string? passwordMismatchError;
    private string? errorMessage;
    private string? successMessage;

    private async Task HandleRegister()
    {
        errorMessage = null;
        successMessage = null;
        passwordMismatchError = null;

        if (registerModel.Password != confirmPassword)
        {
            passwordMismatchError = "‚ùó M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.";
            return;
        }

        var result = await UserService.RegisterAsync(registerModel);
        if (result)
        {
            successMessage = "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.";
            await Task.Delay(1000);
            Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = "‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }
}
