@page "/checkout"
@using Layout_Client.Model.DTO
@using Layout_Client.Service
@inject CartService CartService
@inject OrderService OrderService
@inject UserService UserService
@inject PromoCodeService PromoCodeService
@inject PaymentService PaymentService
@inject NavigationManager Navigation

<h1 class="text-3xl font-bold text-gray-900 mb-4">Thanh to√°n</h1>

@if (cartItems == null || !cartItems.Any())
{
    <div class="text-center text-gray-600 py-8">üõí Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</div>
}
else
{
    <EditForm Model="orderRequest" OnValidSubmit="HandleCheckout">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="flex flex-col lg:flex-row gap-8">
            <!-- LEFT: Delivery Info -->
            <div class="lg:w-2/3">
                <div class="bg-white rounded-lg shadow p-6 mb-6">
                    <h2 class="text-xl font-semibold mb-4 text-indigo-700">
                        <i class="fas fa-truck mr-2"></i>Th√¥ng tin giao h√†ng
                    </h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700">S·ªë ƒëi·ªán tho·∫°i</label>
                        <InputText @bind-Value="orderRequest.PhoneNumber"
                            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                            placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">ƒê·ªãa ch·ªâ nh·∫≠n h√†ng</label>
                        <InputText @bind-Value="orderRequest.DeliveryAddress"
                            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ª• th·ªÉ" />
                    </div>

                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Ghi ch√∫ ƒë∆°n h√†ng</label>
                        <InputTextArea @bind-Value="orderRequest.Note" rows="3"
                            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                            placeholder="V√≠ d·ª•: Giao tr∆∞·ªõc 18h..." />
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Ph∆∞∆°ng th·ª©c thanh to√°n</label>
                        <InputRadioGroup @bind-Value="orderRequest.PaymentMethod">
                            <div class="space-y-3">
                                <div class="flex items-center">
                                    <InputRadio Value="@("COD")" class="h-4 w-4 text-indigo-600" />
                                    <label class="ml-3 text-sm text-gray-700">Thanh to√°n khi nh·∫≠n h√†ng (COD)</label>
                                </div>

                                <div class="flex items-center">
                                    <InputRadio Value="@("MoMo")" class="h-4 w-4 text-indigo-600" />
                                    <label class="ml-3 text-sm text-gray-700 flex items-center">
                                        <img src="https://placehold.co/60x20/pink/white?text=MoMo" alt="MoMo"
                                            class="h-5 mr-2" />
                                        V√≠ ƒëi·ªán t·ª≠ MoMo
                                    </label>
                                </div>
                            </div>
                        </InputRadioGroup>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">M√£ gi·∫£m gi√°</label>
                        <div class="flex">
                            <InputText @bind-Value="orderRequest.Code"
                                class="flex-1 px-4 py-2 border border-gray-300 rounded-l-md focus:ring-indigo-500 focus:border-indigo-500"
                                placeholder="Nh·∫≠p m√£ gi·∫£m gi√°" />
                            <button type="button" @onclick="ApplyPromoCode"
                                class="px-4 py-2 bg-indigo-600 text-white font-medium rounded-r-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                √Åp d·ª•ng
                            </button>
                        </div>
                        @if (discountAmount > 0)
                        {
                            <div class="text-green-600 mt-2">
                                ‚úÖ M√£ h·ª£p l·ªá! Gi·∫£m <strong>@discountAmount.ToString("N0") VND</strong>.
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(promoMessage))
                        {
                            <div class="text-red-600 mt-2">@promoMessage</div>
                        }
                    </div>
                </div>
            </div>

            <!-- RIGHT: Order Summary -->
            <div class="lg:w-1/3">
                <div class="bg-white rounded-lg shadow p-6 sticky top-4">
                    <h2 class="text-lg font-semibold text-indigo-700 mb-4">
                        <i class="fas fa-shopping-bag mr-2"></i>ƒê∆°n h√†ng c·ªßa b·∫°n
                    </h2>

                    <div class="space-y-2 mb-4">
                        @foreach (var item in cartItems)
                        {
                            <div class="flex justify-between text-sm border-b pb-1">
                                <div>@item.Name <span class="text-gray-500">(x @item.Quantity)</span></div>
                                <div>@((item.SellingPrice * item.Quantity).ToString("N0")) VND</div>
                            </div>
                        }
                    </div>

                    @if (discountAmount > 0)
                    {
                        <div class="flex justify-between text-sm mb-2">
                            <span>Gi·∫£m gi√°:</span>
                            <span class="text-emerald-600 font-medium">-@discountAmount.ToString("N0") VND</span>
                        </div>
                    }

                    <div class="border-t pt-3 mt-3 flex justify-between font-semibold">
                        <span>T·ªïng c·ªông:</span>
                        <span class="text-indigo-700 text-lg">@finalTotal.ToString("N0") VND</span>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="text-red-600 mt-2">@errorMessage</div>
                    }

                    <button type="submit"
                        class="w-full checkout-btn mt-6 py-3 px-6 rounded-md bg-indigo-600 text-white font-medium text-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <i class="fas fa-lock mr-2"></i> X√°c nh·∫≠n ƒë∆°n h√†ng
                    </button>

                    <p class="text-xs text-gray-500 text-center mt-4">
                        B·∫±ng c√°ch ƒë·∫∑t h√†ng, b·∫°n ƒë·ªìng √Ω v·ªõi
                        <a href="#" class="text-indigo-600 hover:text-indigo-800">ƒêi·ªÅu kho·∫£n d·ªãch v·ª•</a>
                    </p>
                </div>
            </div>
        </div>

    </EditForm>
    <!-- Toast message -->
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1055">
        @if (!string.IsNullOrEmpty(toastMessage))
        {
            <div class="toast show align-items-center text-white @toastClass border-0" role="alert">
                <div class="d-flex">
                    <div class="toast-body">@toastMessage</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto"
                        @onclick="() => toastMessage = null"></button>
                </div>
            </div>
        }
    </div>

@code {
    private List<CartItemDTO> cartItems = new();
    private List<UserDTO> users = new();
    private decimal totalAmount = 0;
    private decimal discountAmount = 0;
    private decimal finalTotal = 0;
    private string? errorMessage;
    private string? promoMessage;
    private string toastMessage;
    private string toastClass;
    private OrderRequestDTO orderRequest = new()
    {
        Status = "Pending",
        PaymentStatus = "Unpaid",
    };

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartAsync() ?? new List<CartItemDTO>();
        totalAmount = cartItems.Any() ? cartItems.Sum(i => i.SellingPrice * i.Quantity) : 0;
        finalTotal = totalAmount;
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.ContainsKey("errorCode"))
        {
            var errorCode = query["errorCode"].ToString();
            if (errorCode == "0")
            {
                await CartService.ClearCartAsync();
                toastMessage = "üéâ Thanh to√°n MoMo th√†nh c√¥ng v√† ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u!";
                toastClass = "bg-success";
                await Task.Delay(2000);
                Navigation.NavigateTo("/orders");
            }
            else
            {
                toastMessage = "‚ö†Ô∏è Thanh to√°n MoMo th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy!";
                toastClass = "bg-warning";
                await Task.Delay(2000);
                Navigation.NavigateTo("/orders");
            }
        }
    }
    private async Task ApplyPromoCode()
    {
        promoMessage = string.Empty;
        finalTotal = totalAmount;
        discountAmount = 0;
        var result = await PromoCodeService.ValidatePromoCodeAsync(
            orderRequest.Code!,
            cartItems.First().RestaurantID,
            totalAmount,
            cartItems.Sum(i => i.Quantity)
        );
        if (!string.IsNullOrEmpty(result.Error))
        {
            promoMessage = $"‚ùå {result.Error}";
            discountAmount = 0;
            finalTotal = totalAmount;
            return;
        }

        if (result.Discount > 0)
        {
            discountAmount = result.Discount;
            finalTotal = totalAmount - discountAmount;
            promoMessage = $"‚úÖ M√£ h·ª£p l·ªá! Gi·∫£m {discountAmount:N0} VND.";
        }
    }


    private async Task HandleCheckout()
    {
        errorMessage = null;
        var orderDetails = cartItems.Select(item => new OrderDetailRequestDTO
        {
            MenuItemID = item.MenuItemID > 0 ? item.MenuItemID : (int?)null,
            ComboID = item.ComboID > 0 ? item.ComboID : (int?)null,
            Quantity = item.Quantity
        }).ToList();
        int restaurantID = cartItems.First().RestaurantID;

        if (orderRequest.PaymentMethod == "COD")
        {
            var (order, error) = await OrderService.CreateOrderAsync(restaurantID, orderRequest, orderDetails);
            if (order == null)
            {
                toastMessage = "‚ùå " + (error ?? "ƒê·∫∑t h√†ng th·∫•t b·∫°i!");
                toastClass = "bg-danger";
                return;
            }
            await CartService.ClearCartAsync();
            toastMessage = "üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!";
            toastClass = "bg-success";
            await Task.Delay(2000);
            Navigation.NavigateTo("/orders");
        }
        else if (orderRequest.PaymentMethod == "MoMo")
        {
            var (order, error) = await OrderService.CreateOrderAsync(restaurantID, orderRequest, orderDetails);
            if (order == null)
            {
                toastMessage = "‚ùå " + (error ?? "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng!");
                toastClass = "bg-danger";
                return;
            }
            var momoResponse = await PaymentService.CreateMomoPaymentAsync(new OrderInfoDTO
            {
                OrderInfo = "Thanh to√°n ƒë∆°n h√†ng #" + order.OrderID,
                FullName = order.DeliveryAddress ?? "Kh√°ch h√†ng",
                Amount = (int)finalTotal,
                OrderId = order.OrderID.ToString()
            });
            if (momoResponse != null && !string.IsNullOrEmpty(momoResponse.PayUrl))
            {
                Navigation.NavigateTo(momoResponse.PayUrl, forceLoad: true);
            }
            else
            {
                toastMessage = "‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c thanh to√°n MoMo!";
                toastClass = "bg-danger";
            }
        }
    }

}
}
