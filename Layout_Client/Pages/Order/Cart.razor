@page "/cart"
@using Layout_Client.Model.DTO
@using Layout_Client.Service
@inject CartService CartService
@inject UserService UserService

@inject NavigationManager Navigation
@inject IJSRuntime JS

<style>
    .cart-container {
        max-width: 1350px;
        margin: 2rem auto;
        padding: 1rem 2rem;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 8px 20px rgb(0 0 0 / 0.1);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .cart-header {
        font-weight: 700;
        font-size: 1.8rem;
        color: #222222; /* M√†u ƒëen x√°m ƒë·∫πp, kh√¥ng qu√° ch√≥i */
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
    }
    .cart-header i {
        font-size: 2.2rem;
        color: #222222;
    }
    table.cart-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 12px;
    }
    table.cart-table thead th {
        text-align: left;
        padding-bottom: 0.75rem;
        color: #495057;
        font-weight: 600;
        font-size: 0.95rem;
        border-bottom: 2px solid #dee2e6;
    }
    table.cart-table tbody tr {
        background: #f8f9fa;
        border-radius: 10px;
        transition: background-color 0.3s ease;
    }
    table.cart-table tbody tr:hover {
        background: #e9ecef;
    }
    table.cart-table tbody td {
        vertical-align: middle;
        padding: 0.75rem 0.5rem;
        font-size: 0.95rem;
        color: #212529;
    }
    table.cart-table tbody td img {
        border-radius: 8px;
        width: 70px;
        height: 70px;
        object-fit: cover;
        box-shadow: 0 2px 8px rgb(0 0 0 / 0.1);
    }
    .quantity-control {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        justify-content: center;
    }
    .quantity-control button {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        border: 1.5px solid #ced4da;
        background: #fff;
        color: #495057;
        font-weight: 700;
        font-size: 1.2rem;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
    }
    .quantity-control button:hover {
        background-color: #0d6efd;
        color: #fff;
        border-color: #0d6efd;
    }
    .quantity-control span {
        min-width: 24px;
        text-align: center;
        font-weight: 600;
        font-size: 1rem;
    }
    .price, .total-price {
        font-weight: 700;
        color: #dc3545;
        font-size: 1rem;
    }
    .remove-btn {
        background: transparent;
        border: none;
        color: #dc3545;
        font-size: 1.3rem;
        cursor: pointer;
        transition: color 0.2s ease;
    }
    .remove-btn:hover {
        color: #a71d2a;
    }
    .summary {
        margin-top: 2rem;
        padding: 1.5rem 2rem;
        background: #f1f3f5;
        border-radius: 12px;
        box-shadow: inset 0 0 10px rgb(0 0 0 / 0.05);
        max-width: 400px;
        margin-left: auto;
    }
    .summary-row {
        display: flex;
        justify-content: space-between;
        font-size: 1rem;
        margin-bottom: 0.75rem;
        color: #495057;
    }
    .summary-row.discount {
        color: #198754;
    }
    .summary-row.total {
        font-weight: 700;
        font-size: 1.3rem;
        color: #dc3545;
        border-top: 2px solid #dee2e6;
        padding-top: 0.75rem;
        margin-top: 1rem;
    }
    .btn-place-order {
        display: block;
        width: 100%;
        margin-top: 1.5rem;
        padding: 0.75rem 0;
        font-size: 1.1rem;
        font-weight: 700;
        background-color: #222222;
        color: #fff;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        box-shadow: 0 4px 12px rgb(25 135 84 / 0.4);
        transition: background-color 0.3s ease;
    }
    .btn-place-order:hover {
        background-color: #444444;
    }
    .empty-cart {
        text-align: center;
        font-size: 1.2rem;
        color: #6c757d;
        margin-top: 3rem;
        user-select: none;
    }
</style>

<div class="cart-container">
    <h2 class="cart-header">
        <i class="bi bi-cart4"></i> Gi·ªè h√†ng c·ªßa b·∫°n
    </h2>

    @if (cartItems.Count == 0)
    {
        <div class="empty-cart">
            üõí Ch∆∞a c√≥ m√≥n n√†o trong gi·ªè h√†ng.
        </div>
    }
    else
    {
        <table class="cart-table">
            <thead>
                <tr>
                    <th style="text-align: center;">H√¨nh ·∫£nh</th>
                    <th style="text-align: center;">T√™n m√≥n</th>
                    <th style="text-align: center;">Gi√°</th>
                    <th style="text-align: center;">S·ªë l∆∞·ª£ng</th>
                    <th style="text-align: center;">T·ªïng</th>
                    <th style="text-align: center;">Thao t√°c</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td>
                            <img src="@item.ImageUrl" alt="@item.Name" />
                        </td>
                        <td>@item.Name</td>
                        <td class="price">@item.SellingPrice.ToString("N0") ƒë</td>
                        <td>
                            <div class="quantity-control" role="group" aria-label="ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng">
                                <button @onclick="() => ChangeQuantity(item.MenuItemID, -1)" aria-label="Gi·∫£m s·ªë l∆∞·ª£ng">‚àí</button>
                                <span>@item.Quantity</span>
                                <button @onclick="() => ChangeQuantity(item.MenuItemID, 1)" aria-label="TƒÉng s·ªë l∆∞·ª£ng">+</button>
                            </div>
                        </td>
                        <td class="total-price">@((item.SellingPrice * item.Quantity).ToString("N0")) ƒë</td>
                        <td>
                            <button class="remove-btn" @onclick="() => ConfirmRemove(item.MenuItemID, item.ComboID)" title="Xo√° m√≥n">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="summary" aria-label="T√≥m t·∫Øt ƒë∆°n h√†ng">
            <div class="summary-row">
                <span>T·∫°m t√≠nh:</span>
                <span>@cartItems.Sum(i => i.SellingPrice * i.Quantity).ToString("N0") ƒë</span>
            </div>
            <div class="summary-row discount">
                <span>Gi·∫£m gi√°:</span>
                <span>@discountAmount.ToString("N0") ƒë</span>
            </div>
            <div class="summary-row total">
                <span>T·ªïng c·ªông:</span>
                <span>@finalTotal.ToString("N0") ƒë</span>
            </div>
            <button class="btn-place-order" @onclick="PlaceOrder" aria-label="Ti·∫øn h√†nh ƒë·∫∑t h√†ng">
                üßæ Ti·∫øn h√†nh ƒë·∫∑t h√†ng
            </button>
        </div>
    }
</div>

<!-- Toast notification -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055">
    <div class="toast align-items-center text-white bg-success border-0" id="toastNotification" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastBody">Th√†nh c√¥ng!</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

@code {
    private List<CartItemDTO> cartItems = new();
    private string promoCode = "";
    private string promoMessage = "";
    private decimal discountAmount = 0;
    private decimal finalTotal => cartItems.Sum(i => i.SellingPrice * i.Quantity) - discountAmount;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartAsync();
    }

    private async Task ConfirmRemove(int? menuItemId, int? comboId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° m√≥n n√†y?");
        if (confirmed)
        {
            await Remove(menuItemId, comboId);
        }
    }

    private async Task Remove(int? menuItemId,int? comboId)
    {
        await CartService.RemoveFromCartAsync(menuItemId,comboId);
        cartItems = await CartService.GetCartAsync();
        StateHasChanged();
    }

    private async Task ChangeQuantity(int menuItemId, int change)
    {
        var item = cartItems.FirstOrDefault(i => i.MenuItemID == menuItemId);
        if (item != null)
        {
            item.Quantity = Math.Max(1, item.Quantity + change);
            await CartService.SaveCartAsync(cartItems);
            StateHasChanged();
        }
    }
    
    private async void PlaceOrder()
    {
        var user = await UserService.GetCurrentUserAsync();
        if (user == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        ShowToast("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
        Navigation.NavigateTo("/checkout");
    }

    private async void ShowToast(string message)
    {
        await JS.InvokeVoidAsync("showToast", message);
    }
}