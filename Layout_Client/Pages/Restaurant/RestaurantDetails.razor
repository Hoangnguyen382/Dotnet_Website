@page "/restaurant/{id:int}"
@using Layout_Client.Model.DTO
@using Layout_Client.Models.DTO
@using Layout_Client.Models.DTOs
@using Layout_Client.Service
@inject RestaurantService RestaurantService
@inject MenuItemService MenuItemService
@inject ComboService ComboService
@inject CartService CartService
@inject PromoCodeService PromoCodeService
@inject ReviewService ReviewService
@inject UserService UserService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
<style>
    :root {
        --primary-color: #ff6347; /* Tomato */
        --secondary-color: #ffa07a; /* Light Salmon */
        --text-dark: #333;
        --text-muted: #6c757d;
        --bg-light: #f8f9fa;
        --border-color: #e9ecef;
    }

    body {
        background-color: #f5f5f5;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .restaurant-hero {
        background-color: white;
        padding: 2.5rem 0;
        border-bottom: 1px solid var(--border-color);
    }

    .restaurant-info {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .back-btn-container {
        position: absolute;
        top: 1rem;
        left: 1rem;
        z-index: 10;
    }

    .restaurant-logo {
        width: 180px;
        height: 180px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid white;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* C·∫≠p nh·∫≠t cho card-food ƒë·ªÉ gi·ªëng giao di·ªán ƒë·ªì ƒÉn */
.card-food {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border-radius: 16px; /* Bo tr√≤n h∆°n, gi·ªëng app food */
    overflow: hidden;
    background: linear-gradient(145deg, #ffffff, #f8f9fa); /* Gradient nh·∫π cho c·∫£m gi√°c t∆∞∆°i m·ªõi */
}

.card-food:hover {
    transform: translateY(-8px) scale(1.02); /* N√¢ng v√† scale nh·∫π, h·∫•p d·∫´n h∆°n */
    box-shadow: 0 12px 32px rgba(255, 99, 71, 0.2); /* Shadow v·ªõi m√†u primary (tomato) */
}

.card-food-img {
    height: 200px; /* TƒÉng k√≠ch th∆∞·ªõc h√¨nh ·∫£nh ƒë·ªÉ n·ªïi b·∫≠t m√≥n ƒÉn */
    object-fit: cover;
    transition: transform 0.3s ease;
}

.card-food:hover .card-food-img {
    transform: scale(1.05); /* Zoom nh·∫π khi hover */
}

/* Overlay cho t√™n m√≥n */
.card-img-overlay {
    opacity: 0;
    transition: opacity 0.3s ease;
}

.card-food:hover .card-img-overlay {
    opacity: 1;
}

.text-shadow {
    text-shadow: 1px 1px 2px rgba(0,0,0,0.5); /* Shadow cho text tr·∫Øng tr√™n h√¨nh */
}

/* Input search gi·ªëng Grab */
.input-group-text {
    border-radius: 0.5rem 0 0 0.5rem;
}

.input-group .form-control {
    border-radius: 0 0.5rem 0.5rem 0;
}

/* Rating star nh·ªè */
.rating-star {
    color: #ffc107;
    font-size: 0.8rem;
}

/* Text truncate cho m√¥ t·∫£ (th√™m class n·∫øu c·∫ßn) */
.text-truncate-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

/* Pagination food-style */
.pagination .page-link {
    border: none;
    color: var(--primary-color);
    font-weight: 500;
}

.pagination .page-link:hover {
    background-color: var(--secondary-color);
    color: white;
}
    .section-title {
        border-left: 5px solid var(--primary-color);
        padding-left: 1rem;
        font-weight: 700;
        color: var(--text-dark);
    }

    .promo-card {
        border: 2px dashed var(--secondary-color);
        border-radius: 12px;
        background-color: var(--bg-light);
        transition: transform 0.2s ease;
    }
    
    .promo-card:hover {
        transform: scale(1.02);
    }

    .review-card {
        background-color: white;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 0.75rem;
    }

    .modal-content {
        border-radius: 12px;
    }

    .btn-custom-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        color: white;
    }

    .btn-custom-primary:hover {
        background-color: #e65239;
        border-color: #e65239;
    }

    .sticky-filter {
        position: sticky;
        top: 0;
        z-index: 900;
        background-color: #fff;
        padding: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        border-bottom: 1px solid var(--border-color);
    }

    .rating-star {
        color: gold;
    }
    /* Combo card */
.card-combo {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border-radius: 16px;
    overflow: hidden;
    background: linear-gradient(145deg, #fff, #f8f9fa);
    cursor: pointer;
}

.card-combo:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 12px 32px rgba(255, 99, 71, 0.25);
}

.card-combo-img {
    height: 180px;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.card-combo:hover .card-combo-img {
    transform: scale(1.05);
}

.combo-badge {
    position: absolute;
    top: 0.5rem;
    left: 0.5rem;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    border-radius: 0.5rem;
}

.combo-price {
    font-size: 1.25rem;
    font-weight: bold;
    color: var(--primary-color);
}

.combo-desc {
    font-size: 0.9rem;
    color: #555;
    height: 3rem;
    overflow: hidden;
}

</style>

@if (restaurant == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-2 text-muted">ƒêang t·∫£i th√¥ng tin nh√† h√†ng...</p>
    </div>
}
else
{
    <div class="container py-4">
        @* =========================Ph·∫ßn Hi·ªÉn th·ªã Nh√† H√†ng ===================== *@
        <div class="max-w-7xl mx-auto px-4 mb-6">
        <div class="relative bg-white rounded-2xl shadow hover:shadow-lg transition">
            
            <div class="back-btn-container">
                <button class="btn btn-outline-secondary rounded-pill" @onclick='() => Navigation.NavigateTo("/home")'>
                    <i class="fas fa-arrow-left me-1"></i> Quay l·∫°i
                </button>
            </div>
            <div class="row g-4 align-items-center p-4">
                <div class="col-md-auto text-center">
                    <img src="@restaurant.LogoUrl" class="restaurant-logo" alt="@restaurant.Name logo" />
                </div>
                <div class="col-md">
                    <div class="restaurant-info">
                        <h1 class="fw-bold mb-1" style="color: var(--primary-color);">@restaurant.Name</h1>
                        <p class="text-muted mb-2">@restaurant.Description</p>
                        <ul class="list-unstyled mb-0 text-muted">
                            <li><i class="fas fa-map-marker-alt me-2"></i> @restaurant.Address</li>
                            <li><i class="fas fa-phone me-2"></i> @restaurant.PhoneNumber</li>
                            <li><i class="fas fa-clock me-2"></i> @restaurant.OpeningHours</li>
                            <li>
                                <i class="fas fa-star me-2" style="color: gold;"></i> 
                                <span class="fw-bold">@averageRating.ToString("0.0")</span> / 5 
                                (@reviews?.Count ƒë√°nh gi√°)
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            </div>
        </div>
        @* =========================Ph·∫ßn Hi·ªÉn th·ªã M√£ gi·∫£m gi√° ===================== *@

        @if (promoCodes != null && promoCodes.Count > 0)
        {
            <div class="mb-5">
                <div class="max-w-7xl mx-auto px-4 mb-6">
                <h1 class="flex items-center gap-3 text-2xl font-bold mb-4">
                    <span>üéÅ M√£ Gi·∫£m Gi√° ƒê·∫∑c Bi·ªát</span>
                </h1>
                <div class="row g-3">
                    @foreach (var promo in promoCodes)
                    {
                        <div class="col-sm-6 col-md-4 col-lg-3">
                            <div class="promo-card p-3 h-100 position-relative">
                                <span class="badge rounded-pill bg-success position-absolute top-0 end-0 mt-2 me-2">
                                    <i class="fas fa-check-circle me-1"></i> @(promo.IsActive ? "C√≤n hi·ªáu l·ª±c" : "H·∫øt h·∫°n")
                                </span>
                                <h5 class="fw-bold" style="color: var(--primary-color);">@promo.Code</h5>
                                <p class="text-muted small mb-2">@promo.Description</p>
                                <hr class="my-2" />
                                <ul class="list-unstyled small mb-0">
                                    @if (promo.Type == PromoCodeType.AmountDiscount)
                                    {
                                        <li><i class="fas fa-money-bill-wave me-2"></i> Gi·∫£m: <strong>@promo.DiscountAmount?.ToString("N0") ƒë</strong></li>
                                        <li><i class="fas fa-receipt me-2"></i> ƒê∆°n t·ªëi thi·ªÉu: @promo.MinOrderAmount?.ToString("N0") ƒë</li>
                                    }
                                    else if (promo.Type == PromoCodeType.QuantityDiscount)
                                    {
                                        <li><i class="fas fa-percent me-2"></i> Gi·∫£m: <strong>@promo.DiscountPercent?.ToString("0.#")%</strong></li>
                                        <li><i class="fas fa-utensils me-2"></i> SL t·ªëi thi·ªÉu: @promo.MinQuantity m√≥n</li>
                                    }
                                    <li><i class="fas fa-calendar-alt me-2"></i> <strong>HSD:</strong> @promo.StartDate?.ToString("dd/MM") - @promo.ExpiryDate?.ToString("dd/MM")</li>
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            </div>
            </div>
        }


        @* =========================Ph·∫ßn Hi·ªÉn th·ªã Combo ===================== *@
        <div class="mb-8">
            <div class="max-w-7xl mx-auto px-4 mb-6">
            <h1 class="flex items-center gap-3 text-2xl font-bold mb-6">üéâ <span>Combo ∆Øu ƒê√£i</span></h1>

            @if (combos == null)
            {
                <div class="flex flex-col items-center justify-center my-10">
                    <div class="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                    <p class="mt-2 text-gray-500 text-sm">ƒêang t·∫£i combo...</p>
                </div>
            }
            else if (!combos.Any())
            {
                <div class="text-center bg-yellow-100 text-yellow-700 py-3 rounded-xl">
                    Hi·ªán ch∆∞a c√≥ combo n√†o.
                </div>
            }
            else
            {
                <div class="max-w-7xl mx-auto px-4">
                    <!-- grid centered, responsive -->
                    <div class="grid justify-center place-items-start grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-6">
                        @foreach (var combo in combos)
                        {
                            <div class="w-[280px] h-[380px] bg-white rounded-2xl shadow-sm hover:shadow-lg transform transition duration-200 hover:scale-105 overflow-hidden flex flex-col">
                                <!-- image area (fixed height) -->
                                <div class="h-[200px] relative overflow-hidden">
                                    <img src="@combo.ImageUrl" alt="@combo.Name" class="w-full h-full object-cover" />
                                    <span class="absolute top-3 left-3 bg-red-500 text-white text-[11px] font-semibold px-2 py-[2px] rounded-full flex items-center gap-1 shadow">
                                        <i class="fas fa-fire text-xs"></i> Hot
                                    </span>
                                </div>

                                <!-- body -->
                                <div class="p-3 flex-1 flex flex-col">
                                    <h3 class="text-sm font-semibold text-gray-800 truncate">@combo.Name</h3>

                                    <!-- clamp description to 2 lines (works in most browsers) -->
                                    <p class="text-xs text-gray-500 mt-1 overflow-hidden" style="-webkit-line-clamp:2;display:-webkit-box;-webkit-box-orient:vertical;">
                                        @combo.Description
                                    </p>

                                    <div class="text-blue-600 font-bold text-sm mt-2">@combo.Price.ToString("N0") ƒë</div>

                                    <div class="mt-auto flex gap-2">
                                        <button class="flex-1 text-sm py-1 border border-blue-500 text-blue-500 rounded-lg hover:bg-blue-50 flex items-center justify-center"
                                                @onclick="() => ViewComboDetail(combo.ComboID)">
                                            <i class="fas fa-eye mr-1"></i> Xem
                                        </button>
                                        <button class="flex-1 text-sm py-1 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center justify-center"
                                                @onclick="() => AddComboToCart(combo)">
                                            <i class="fas fa-cart-plus mr-1"></i> Th√™m
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
       </div>

        @* =========================Ph·∫ßn Hi·ªÉn th·ªã M√≥n ƒÇN ===================== *@

 <div class="mb-8">
    <!-- Thanh filter -->
    <div class="max-w-7xl mx-auto px-4 mb-6">
        <h1 class="flex items-center gap-3 text-2xl font-bold mb-4">
            üçΩÔ∏è <span>Th·ª±c ƒê∆°n Nh√† H√†ng</span>
        </h1>
        <div class="flex flex-col sm:flex-row gap-3 items-stretch">
            <!-- √î t√¨m ki·∫øm -->
            <div class="relative flex-1 basis-1/2">
                <span class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" @bind="searchTerm"
                    placeholder="T√¨m m√≥n ƒÉn y√™u th√≠ch..."
                    class="w-full pl-10 pr-3 py-2 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:outline-none" />
            </div>

            <!-- Ch·ªçn danh m·ª•c -->
            <div class="flex-1 basis-1/2">
                <select @bind="selectedCategoryId"
                        class="w-full py-2 px-3 border rounded-xl bg-white focus:ring-2 focus:ring-blue-500 focus:outline-none">
                    <option value="">üìÇ T·∫•t c·∫£ danh m·ª•c</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.CategoryID">@category.Name</option>
                    }
                </select>
            </div>

            <!-- N√∫t t√¨m ki·∫øm -->
            <button class="w-full sm:w-auto px-5 bg-orange-500 hover:bg-orange-600 text-white font-medium rounded-xl flex items-center justify-center gap-2 h-full flex-shrink-0"
                    @onclick="Search">
                <i class="fas fa-search"></i> 
                <span>Sreach</span>
            </button>
        </div>


    </div>

    <!-- Danh s√°ch m√≥n ƒÉn -->
    @if (isLoading)
    {
        <div class="flex flex-col items-center justify-center my-10">
            <div class="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
            <p class="mt-2 text-gray-500 text-sm">ƒêang t·∫£i m√≥n ƒÉn...</p>
        </div>
    }
    else if (menuItems == null || menuItems.Count == 0)
    {
        <div class="text-center bg-yellow-100 text-yellow-700 py-3 rounded-xl max-w-7xl mx-auto px-4">
            Kh√¥ng c√≥ m√≥n ƒÉn n√†o ph√π h·ª£p.
        </div>
    }
    else
    {
        <div class="max-w-7xl mx-auto px-4">
            <div class="grid justify-center place-items-start grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-6">
                @foreach (var item in menuItems.Where(m => m.IsAvailable == true))
                {
                    <div class="w-[280px] h-[380px] bg-white rounded-2xl shadow-sm hover:shadow-lg transform transition duration-200 hover:scale-105 overflow-hidden flex flex-col">
                        <div class="h-[200px] relative overflow-hidden">
                            <img src="@item.ImageUrl" alt="@item.Name" class="w-full h-full object-cover" />

                            @if (item.Price > item.SellingPrice)
                            {
                                <span class="absolute top-3 left-3 bg-red-500 text-white text-[11px] font-semibold px-2 py-[2px] rounded-full flex items-center gap-1 shadow">
                                    <i class="fas fa-percent text-xs"></i> 
                                    -@Math.Round(((item.Price - item.SellingPrice) / item.Price * 100), 0)%
                                </span>
                            }
                            else
                            {
                                <span class="absolute top-3 left-3 bg-red-500 text-white text-[11px] font-semibold px-2 py-[2px] rounded-full flex items-center gap-1 shadow">
                                    <i class="fas fa-fire text-xs"></i> Hot
                                </span> 
                            }
                        </div>

                        <div class="p-3 flex-1 flex flex-col">
                            <h3 class="text-sm font-semibold text-gray-800 truncate">@item.Name</h3>
                            <p class="text-xs text-gray-500 mt-1 overflow-hidden" style="-webkit-line-clamp:2;display:-webkit-box;-webkit-box-orient:vertical;">
                                @item.Description
                            </p>

                            @if (averageRatings.TryGetValue(item.MenuItemID, out var avg) && avg > 0)
                            {
                                <div class="flex items-center text-xs mt-1 text-yellow-500">
                                    <i class="fas fa-star mr-1"></i>
                                    <span>@avg.ToString("0.0")</span>
                                </div>
                            }
                            else
                            {
                                <div class="flex items-center text-xs mt-1 text-gray-400">
                                    <i class="far fa-star mr-1"></i>
                                    <span>Ch∆∞a c√≥ ƒë√°nh gi√°</span>
                                </div>
                            }

                            <div class="text-blue-600 font-bold text-sm mt-2">
                                @if (item.Price > item.SellingPrice)
                                {
                                    <span class="text-gray-400 line-through mr-1">@item.Price.ToString("N0") ƒë</span>
                                    <span>@item.SellingPrice.ToString("N0") ƒë</span>
                                }
                                else
                                {
                                    <span>@item.SellingPrice.ToString("N0") ƒë</span>
                                }
                            </div>

                            <div class="mt-auto flex gap-2">

                                <button class="flex-1 text-sm py-1 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center justify-center"
                                        @onclick="() => AddToCart(item)">
                                    <i class="fas fa-cart-plus mr-1"></i> Th√™m
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (hasNextPage || currentPage > 1)
            {
                <div class="flex justify-center mt-6 space-x-2">
                    <button class="px-4 py-2 border rounded-full flex items-center @(currentPage == 1 ? "opacity-50 cursor-not-allowed" : "")"
                            @onclick="PreviousPage" disabled="@(currentPage == 1)">
                        <i class="fas fa-chevron-left mr-1"></i> Tr∆∞·ªõc
                    </button>
                    <span class="px-4 py-2 bg-gray-100 rounded-full">Trang @currentPage</span>
                    <button class="px-4 py-2 border rounded-full flex items-center @(hasNextPage ? "" : "opacity-50 cursor-not-allowed")"
                            @onclick="NextPage" disabled="@(!hasNextPage)">
                        Sau <i class="fas fa-chevron-right ml-1"></i>
                    </button>
                </div>
            }
        </div>
    }
</div>


        @* =========================Ph·∫ßn Hi·ªÉn th·ªã ƒê√°nh Gi√°===================== *@
        <hr class="my-5" />
        <div class="mb-5">
            <h3 class="section-title mb-4">üí¨ ƒê√°nh Gi√° & B√¨nh Lu·∫≠n</h3>
            <div class="row g-4">
                <div class="col-md-6">
                    <div class="p-4 bg-white rounded-4 shadow-sm h-100">
                        <h5 class="fw-bold text-danger mb-3">‚≠ê ƒê√°nh gi√° chung v·ªÅ nh√† h√†ng (@reviews?.Count)</h5>
                        <div style="max-height: 500px; overflow-y: auto;">
                            @if (reviews == null || !reviews.Any())
                            {
                                <p class="text-muted text-center">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o cho nh√† h√†ng n√†y.</p>
                            }
                            else
                            {
                                @foreach (var r in reviews)
                                {
                                    <div class="review-card">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <h6 class="fw-bold mb-0">@r?.UserName</h6>
                                            <small class="text-muted">@r.ReviewDate.ToString("dd/MM/yyyy")</small>
                                        </div>
                                        <div class="text-warning mb-2">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <i class="bi @(i <= r.Rating ? "bi-star-fill" : "bi-star")"></i>
                                            }
                                        </div>
                                        <p class="mb-0 text-dark">@r.Comment</p>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="p-4 bg-white rounded-4 shadow-sm h-100">
                        <h5 class="fw-bold text-danger mb-3">üçΩÔ∏è ƒê√°nh gi√° chi ti·∫øt m√≥n ƒÉn (@dishReviews?.Count)</h5>
                        <div style="max-height: 500px; overflow-y: auto;">
                            @if (dishReviews == null || !dishReviews.Any())
                            {
                                <p class="text-muted text-center">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o cho m√≥n ƒÉn.</p>
                            }
                            else
                            {
                                @foreach (var r in dishReviews)
                                {
                                    var item = menuItems.FirstOrDefault(m => m.MenuItemID == r.MenuItemID);
                                    <div class="review-card">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <h6 class="fw-bold mb-0">@r?.UserName</h6>
                                            <small class="text-muted">@r.ReviewDate.ToString("dd/MM/yyyy")</small>
                                        </div>
                                        <span class="badge bg-info text-dark mb-2 fw-normal">
                                            M√≥n: <span class="fw-bold">@item?.Name</span>
                                        </span>
                                        <div class="text-warning mb-2">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <i class="bi @(i <= r.Rating ? "bi-star-fill" : "bi-star")"></i>
                                            }
                                        </div>
                                        <p class="mb-0 text-dark">@r.Comment</p>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* =========================Ph·∫ßn Vi·∫øt ƒê√°nh Gi√°===================== *@
        <div class="bg-white rounded-4 shadow-sm p-4 mb-5 ">
            <h3 class="section-title mb-4">üìù Vi·∫øt ƒë√°nh gi√° c·ªßa b·∫°n</h3>
            @if (currentUser == null)
            {
                <div class="alert alert-warning text-center rounded-4">
                    Vui l√≤ng <a href="/login" class="fw-bold text-decoration-none">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ vi·∫øt ƒë√°nh gi√°.
                </div>
            }
            else
            {
                 <div class="d-grid gap-2 mx-auto text-center" style="max-width: 300px;">
                    <button class="btn btn-primary" @onclick="() => showReviewOptions = true">
                        <i class="fas fa-edit me-2"></i> Vi·∫øt ƒë√°nh gi√° ngay
                    </button>
                </div>
            }
            
            @if (showReviewOptions)
            {
                <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
                    <div class="modal-dialog modal-sm modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header bg-primary text-white">
                                <h5 class="modal-title">Ch·ªçn lo·∫°i ƒë√°nh gi√°</h5>
                                <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                            </div>
                            <div class="modal-body d-grid gap-3">
                                <button class="btn btn-outline-danger" @onclick="ShowRestaurantReviewForm">
                                    üè† ƒê√°nh gi√° nh√† h√†ng
                                </button>
                                <button class="btn btn-outline-success" @onclick="ShowDishReviewForm">
                                    üçΩÔ∏è ƒê√°nh gi√° m√≥n ƒÉn
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            
            @if (showRestaurantForm || showDishForm)
            {
                <div class="mt-4 p-4 rounded-4 bg-light">
                    <EditForm Model="newReview" OnValidSubmit="SubmitReview">
                        <DataAnnotationsValidator />
                        <h5 class="fw-bold mb-3" style="color: var(--primary-color);">
                            @(showRestaurantForm ? "üè† ƒê√°nh gi√° nh√† h√†ng" : "üçΩÔ∏è ƒê√°nh gi√° m√≥n ƒÉn")
                        </h5>
                        @if (showDishForm)
                        {
                            <div class="mb-3">
                                <label class="form-label fw-bold">Ch·ªçn m√≥n ƒÉn</label>
                                <InputSelect class="form-select" @bind-Value="newReview.MenuItemID">
                                    <option value="">-- Ch·ªçn m√≥n --</option>
                                    @foreach (var item in menuItems)
                                    {
                                        <option value="@item.MenuItemID">@item.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newReview.MenuItemID)" />
                            </div>
                        }
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">S·ªë sao (1‚Äì5)</label>
                            <InputNumber class="form-control" @bind-Value="newReview.Rating" min="1" max="5" />
                            <ValidationMessage For="@(() => newReview.Rating)" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">B√¨nh lu·∫≠n</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="newReview.Comment" />
                            <ValidationMessage For="@(() => newReview.Comment)" />
                        </div>
                        
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-secondary" @onclick="ResetReviewForm">H·ªßy</button>
                            <button type="submit" class="btn btn-custom-primary">G·ª≠i ƒë√°nh gi√°</button>
                        </div>
                    </EditForm>
                </div>
            }
            
            @if (!string.IsNullOrEmpty(toastMessage))
            {
                <div class="alert @toastClass mt-3 text-center">
                    @toastMessage
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private Dictionary<int, double> averageRatings = new();
    private RestaurantResponseDTO? restaurant;
    private List<MenuItemResponseDTO> menuItems = new List<MenuItemResponseDTO>();
    private List<ComboResponseDTO> combos = new List<ComboResponseDTO>();
    private List<CategoryResponseDTO> categories = new List<CategoryResponseDTO>();
    private List<PromoCodeResponseDTO> promoCodes = new List<PromoCodeResponseDTO>();
    private List<ReviewResponseDTO>? reviews;
    private List<ReviewResponseDTO>? dishReviews;
    private ReviewRequestDTO newReview = new ReviewRequestDTO();
    private UserResponseDTO? currentUser;
    private double averageRating = 0;
    private bool showReviewOptions = false;
    private bool showRestaurantForm = false;
    private bool showDishForm = false;
    private string searchTerm = "";
    private int? selectedCategoryId;
    private bool isLoading = true;
    private int currentPage = 1;
    private const int PageSize = 8; // TƒÉng s·ªë l∆∞·ª£ng m√≥n hi·ªÉn th·ªã tr√™n m·ªói trang
    private bool hasNextPage = false;
    private string? toastMessage;
    private string? toastClass;

    protected override async Task OnInitializedAsync()
    {
        restaurant = await RestaurantService.GetRestaurantByIdAsync(id);
        categories = await MenuItemService.GetCategoriesAsync(restaurant.RestaurantID);
        promoCodes = await PromoCodeService.GetAllPromoCodeAsync(id);
        combos = await ComboService.GetComboByRestaurantAsync(id);
        await LoadMenuItems();
        currentUser = await UserService.GetCurrentUserAsync();
        await LoadReviews();
        averageRating = await ReviewService.GetAverageRatingForRestaurantAsync(id);
        newReview = new()
        {
            RestaurantID = id,
            Rating = 5
        };
    }

    private async Task LoadMenuItems()
    {
        isLoading = true;
        menuItems = await MenuItemService.GetAllMenuItemAsync(id, searchTerm, selectedCategoryId, currentPage, PageSize);
        hasNextPage = menuItems != null && menuItems.Count == PageSize;
        isLoading = false;
        await LoadAverageRatings();
    }

    private void ViewComboDetail(int comboId)
    {
        Navigation.NavigateTo($"/combodetail/{comboId}");
    }

    private async Task AddToCart(MenuItemResponseDTO item)
    {
        var cartItem = new CartItemDTO
        {
            MenuItemID = item.MenuItemID,
            Name = item.Name,
            ImageUrl = item.ImageUrl,
            SellingPrice = item.SellingPrice,
            Quantity = 1,
            RestaurantID = id
        };
        bool added = await CartService.AddToCartAsync(cartItem);
        if (!added)
        {
            bool confirm = await JS.InvokeAsync<bool>("confirm", "B·∫°n ƒëang c√≥ m√≥n ƒÉn t·ª´ nh√† h√†ng kh√°c trong gi·ªè. B·∫°n c√≥ mu·ªën x√≥a gi·ªè h√†ng ƒë·ªÉ th√™m m√≥n m·ªõi?");
            if (confirm)
            {
                await CartService.ClearCartAsync();
                await CartService.AddToCartAsync(cartItem);
                await JS.InvokeVoidAsync("alert", "‚úÖ ƒê√£ th√™m v√†o gi·ªè h√†ng!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "‚ùå Kh√¥ng th·ªÉ th√™m m√≥n t·ª´ nh√† h√†ng kh√°c.");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "‚úÖ ƒê√£ th√™m v√†o gi·ªè h√†ng!");
        }
    }

    private async Task AddComboToCart(ComboResponseDTO combo)
    {
        var cartItem = new CartItemDTO
        {
            ComboID = combo.ComboID,
            Name = combo.Name,
            ImageUrl = combo.ImageUrl,
            SellingPrice = combo.Price,
            Quantity = 1,
            RestaurantID = id
        };

        bool added = await CartService.AddToCartAsync(cartItem);
        if (!added)
        {
            bool confirm = await JS.InvokeAsync<bool>("confirm", "B·∫°n ƒëang c√≥ m√≥n ƒÉn t·ª´ nh√† h√†ng kh√°c trong gi·ªè. B·∫°n c√≥ mu·ªën x√≥a gi·ªè h√†ng ƒë·ªÉ th√™m combo m·ªõi?");
            if (confirm)
            {
                await CartService.ClearCartAsync();
                await CartService.AddToCartAsync(cartItem);
                await JS.InvokeVoidAsync("alert", "‚úÖ ƒê√£ th√™m combo v√†o gi·ªè h√†ng!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "‚ùå Kh√¥ng th·ªÉ th√™m combo t·ª´ nh√† h√†ng kh√°c.");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "‚úÖ ƒê√£ th√™m combo v√†o gi·ªè h√†ng!");
        }
    }

    private async Task LoadAverageRatings()
    {
        averageRatings.Clear();
        foreach (var item in menuItems)
        {
            var avg = await ReviewService.GetAverageRatingForMenuItemAsync(item.MenuItemID);
            averageRatings[item.MenuItemID] = avg;
        }
    }

    private async Task LoadReviews()
    {
        var allReviews = await ReviewService.GetReviewsByRestaurantIdAsync(id);
        if (allReviews != null)
        {
            reviews = allReviews.Where(r => r.MenuItemID == null || r.MenuItemID == 0).ToList();
            dishReviews = allReviews.Where(r => r.MenuItemID > 0).ToList();
        }
    }

    private void CloseModal()
    {
        showReviewOptions = false;
        showRestaurantForm = false;
        showDishForm = false;
    }

    private void ShowRestaurantReviewForm()
    {
        showRestaurantForm = true;
        showReviewOptions = false;
        showDishForm = false;
        newReview = new()
        {
            RestaurantID = id,
            Rating = 5,
        };
    }

    private void ShowDishReviewForm()
    {
        showDishForm = true;
        showReviewOptions = false;
        showRestaurantForm = false;

        newReview = new()
        {
            RestaurantID = id,
            Rating = 5,
        };
    }

    private void ResetReviewForm()
    {
        showRestaurantForm = false;
        showDishForm = false;
    }

    private async Task SubmitReview()
    {
        if (currentUser == null)
        {
            toastMessage = "‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!";
            toastClass = "bg-danger text-white";
            StateHasChanged();
            return;
        }

        newReview.UserID = currentUser.UserID;
        newReview.RestaurantID = id;

        bool result = false;

        if (showRestaurantForm)
        {
            newReview.MenuItemID = 0;
            result = await ReviewService.CreateRestaurantReviewAsync(newReview);
        }
        else if (showDishForm)
        {
            if (newReview.MenuItemID == null || newReview.MenuItemID == 0)
            {
                toastMessage = "‚ùå Vui l√≤ng ch·ªçn m√≥n ƒÉn ƒë·ªÉ ƒë√°nh gi√°!";
                toastClass = "bg-danger text-white";
                StateHasChanged();
                await Task.Delay(3000);
                toastMessage = null;
                toastClass = null;
                StateHasChanged();
                return;
            }
            result = await ReviewService.CreateMenuItemReviewAsync(newReview);
        }

        if (result)
        {
            toastMessage = "üéâ ƒê√°nh gi√° th√†nh c√¥ng!";
            toastClass = "bg-success text-white";
            newReview.Comment = "";
            newReview.Rating = 5;
            ResetReviewForm();
            await LoadReviews();
            await LoadMenuItems();
        }
        else
        {
            toastMessage = "‚ùå ƒê√°nh gi√° th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.";
            toastClass = "bg-danger text-white";
        }

        StateHasChanged();
        await Task.Delay(3000);
        toastMessage = null;
        toastClass = null;
        StateHasChanged();
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadMenuItems();
    }

    private async Task NextPage() { currentPage++; await LoadMenuItems(); }

    private async Task PreviousPage() { if (currentPage > 1) { currentPage--; await LoadMenuItems(); } }
}