@page "/orders"
@using Blazored.LocalStorage
@using Layout_Client.Model.DTO
@using Layout_Client.Service
@inject ChatHubService ChatHubService
@inject ILocalStorageService LocalStorageService
@inject UploadService UploadService
@inject OrderService OrderService
@inject UserService UserService
@inject ChatService ChatService
@inject ChatHubService ChatHubService
@inject ComboService ComboService
@inject IJSRuntime JS
@inject MenuItemService MenuItemService

<h2 class="fw-bold text-center mb-5 text-primary">
    üßæ Danh s√°ch ƒë∆°n h√†ng c·ªßa b·∫°n
</h2>

@if (orders == null)
{
    <div class="text-center text-secondary">‚è≥ ƒêang t·∫£i ƒë∆°n h√†ng...</div>
}
else if (!orders.Any())
{
    <div class="text-center text-muted">B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.</div>
}
else
{
    <div class="row g-4">
        @foreach (var order in orders)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <div class="order-card shadow-sm border h-100">
                    <div class="order-header d-flex justify-content-between align-items-center">
                        <span class="fw-bold text-primary">#@order.OrderID</span>
                        <span class="order-date">üìÖ @order.OrderDate.ToString("dd/MM/yyyy")</span>
                    </div>

                    <div class="order-body">
                        <p><i class="bi bi-geo-alt text-danger"></i> <strong>ƒê·ªãa ch·ªâ:</strong> @order.DeliveryAddress</p>
                        <p><i class="bi bi-telephone text-success"></i> <strong>SDT:</strong> @order.PhoneNumber</p>
                        <p><i class="bi bi-credit-card"></i> <strong>Thanh to√°n:</strong> @order.PaymentMethod</p>

                        <h5 class="fw-bold text-danger mt-3">
                            T·ªïng Ti·ªÅn: @order.TotalAmount.ToString("N0") ƒë
                        </h5>

                        <div class="mt-3">
                            <span class="badge status-badge">Tr·∫°ng th√°i: @order.Status</span>
                        </div>

                        <div class="mt-2">
                            @if (order.PaymentStatus == "Th√†nh C√¥ng")
                            {
                                <span class="badge bg-success">üí≥ ƒê√£ Thanh To√°n</span>
                            }
                            else if (order.PaymentStatus == "Th·∫•t B·∫°i")
                            {
                                <span class="badge bg-danger">‚ùå Thanh To√°n Th·∫•t B·∫°i</span>
                            }
                            else
                            {
                                <span class="badge bg-warning text-dark">‚åõ Ch∆∞a Thanh To√°n</span>
                            }
                        </div>
                    </div>

                    <div class="order-footer text-end mt-3">
                        <button class="btn btn-sm btn-outline-primary"
                                @onclick="() => ShowOrderDetails(order.OrderID)">
                            Xem chi ti·∫øt ‚Üí
                        </button>
                    </div>
                    <div class="order-footer text-end mt-3">
                        <button class="btn btn-sm btn-outline-success ms-2"
                                @onclick="() => OpenChat(order.OrderID, order.RestaurantID)">
                            üí¨ Chat
                        </button>
                    </div>

                </div>
            </div>
        }
    </div>
}

<!-- Offcanvas hi·ªÉn th·ªã chi ti·∫øt -->
@if (selectedOrderDetails != null)
{
    <div class="offcanvas offcanvas-end show" tabindex="-1"
         style="visibility: visible; background: #fff; width: 500px; box-shadow: -2px 0 15px rgba(0,0,0,0.1);"
         aria-modal="true" role="dialog">
        <div class="offcanvas-header bg-primary text-white">
            <h5 class="offcanvas-title">üõç Chi ti·∫øt ƒë∆°n #@selectedOrderId</h5>
            <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
        </div>
        <div class="offcanvas-body">
            <ul class="list-group list-group-flush">
                @foreach (var item in selectedOrderDetails)
                {
                    <li class="list-group-item">
                        <div class="d-flex align-items-center">
                            <img src="@item.ImageUrl" class="rounded me-3"
                                 style="width:55px;height:55px;object-fit:cover;" />

                            <div class="flex-grow-1">
                                @if (item.ComboID != null && item.ComboID > 0 && item.UnitPrice > 0)
                                {
                                    <div class="fw-bold text-primary">[Combo] @item.MenuItemName</div>
                                }
                                else if (item.UnitPrice == 0)
                                {
                                    <div class="text-muted" style="margin-left:15px; font-size:0.9rem;">
                                        ‚îî @item.MenuItemName x(@item.Quantity)
                                    </div>
                                }
                                else
                                {
                                    <div class="fw-bold">@item.MenuItemName</div>
                                }

                                @if (item.UnitPrice > 0)
                                {
                                    <small>S·ªë l∆∞·ª£ng: @item.Quantity √ó @item.UnitPrice.ToString("N0") ƒë</small>
                                }
                            </div>

                            @if (item.UnitPrice > 0)
                            {
                                <div class="text-end fw-bold text-danger">
                                    @((item.UnitPrice * item.Quantity).ToString("N0")) ƒë
                                </div>
                            }
                        </div>
                    </li>
                }

                <li class="list-group-item fw-bold d-flex justify-content-between">
                    <span>T·ªïng c·ªông:</span>
                    <span class="text-danger">
                        @selectedOrderDetails.Where(i => i.UnitPrice > 0).Sum(i => i.UnitPrice * i.Quantity).ToString("N0") ƒë
                    </span>
                </li>
            </ul>
        </div>
        <div class="offcanvas-footer p-3 text-end">
            <button class="btn btn-secondary" @onclick="CloseModal">ƒê√≥ng</button>
        </div>
    </div>
}


@if (chattingOrderId > 0)
{
    <div class="messenger-chat">
    <div class="chat-header d-flex justify-content-between align-items-center">
        <span>üí¨ Chat ƒë∆°n #@chattingOrderId</span>
        <button class="btn-close btn-close-white btn-sm" @onclick="CloseChat"></button>
    </div>

    <div class="chat-messages flex-grow-1 overflow-auto">
        @if (messages != null)
        {
            @foreach (var msg in messages)
            {
                var isMine = msg.SenderId == currentUserId;
                <div class="chat-message @(isMine ? "mine" : "theirs")">
                    @if (msg.Images != null && msg.Images.Any())
                    {
                        <div class="chat-images">
                            @foreach (var img in msg.Images)
                            {
                                <img src="@img.ImageUrl" class="chat-img" />
                            }
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(msg.Content))
                    {
                        <div class="bubble">
                            <div class="chat-text">@msg.Content</div>
                            <div class="time">@msg.SentAt.ToString("HH:mm")</div>
                        </div>
                    }
                </div>
            }
        }
    </div>

    <div class="chat-input d-flex gap-1 align-items-center mt-1 mb-2">
        <label for="fileInput" class="btn btn-light btn-sm p-1" style="cursor:pointer;">
            <i class="bi bi-image text-primary"></i>
        </label>
        <InputFile id="fileInput" OnChange="OnFilesSelected" multiple style="display:none;" />
        <input class="form-control form-control-sm" @bind="newMessage" placeholder="Nh·∫≠p tin nh·∫Øn..." />
        <button class="btn btn-primary btn-sm" @onclick="SendMessage">G·ª≠i</button>
    </div>

    @if (selectedImageUrls.Any())
    {
        <div class="preview-images d-flex flex-wrap mt-1">
            @foreach (var img in selectedImageUrls)
            {
                <div class="position-relative me-2 mb-2">
                    <img src="@img" class="preview-img" />
                    <button type="button" class="btn-close btn-close-red btn-sm position-absolute top-0 end-0"
                            style="transform: translate(25%, -25%);"
                            @onclick="() => RemoveImage(img)">
                    </button>
                </div>
            }
        </div>
    }

</div>
}

@code {
    private List<OrderResponseDTO>? orders;
    private List<string> selectedImageUrls = new();

    private List<OrderDetailResponseDTO>? selectedOrderDetails;
    private int selectedOrderId;
   
    private int currentUserId;
    private string currentUserRole;
    private int currentConversationId;
    private int chattingOrderId;
    private int chattingRestaurantId;
    private List<MessageResponseDTO> messages = new();
    private string newMessage = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetCurrentUserAsync();
        if (user != null)
        {
            currentUserId = user.UserID;
            currentUserRole = user.Role;
        }
        orders = await OrderService.GetOrderByUserIdAsync();
        ChatHubService.OnMessageReceived += (message) =>
        {
            if (message.ConversationId == currentConversationId)
            {
                messages.Add(message);
                InvokeAsync(StateHasChanged);
            }
        };
    }

    private async Task ShowOrderDetails(int orderId)
    {
        selectedOrderId = orderId;
        var details = await OrderService.GetOrderDetailByOrderIdAsync(orderId);

        selectedOrderDetails = new();

        foreach (var item in details)
        {
            if (item.ComboID != null && item.ComboID > 0)
            {
                // Hi·ªÉn combo cha
                var combo = await ComboService.GetComboByIdAsync(item.ComboID.Value);
                selectedOrderDetails.Add(new OrderDetailResponseDTO
                {
                    ComboID = item.ComboID,
                    MenuItemName = combo?.Name ?? $"Combo #{item.ComboID}",
                    ImageUrl = combo?.ImageUrl ?? "images/combo-default.png",
                    Quantity = item.Quantity,
                    UnitPrice = item.UnitPrice
                });

                // Th√™m c√°c m√≥n con trong combo
                var comboDetails = await ComboService.GetComboDetailsByIdAsync(item.ComboID.Value);
                foreach (var cd in comboDetails)
                {
                    selectedOrderDetails.Add(new OrderDetailResponseDTO
                    {
                        MenuItemID = cd.MenuItemID,
                        MenuItemName = cd.MenuItemName,
                        ImageUrl = cd.MenuItemImage,
                        Quantity = cd.Quantity,
                        UnitPrice = 0
                    });
                }
            }
            else if (item.MenuItemID.HasValue && item.MenuItemID > 0)
            {

                var menuItem = await MenuItemService.GetByIdAsync(item.MenuItemID.Value);
                selectedOrderDetails.Add(new OrderDetailResponseDTO
                {
                    MenuItemID = item.MenuItemID,
                    MenuItemName = menuItem?.Name ?? $"M√≥n #{item.MenuItemID}",
                    ImageUrl = menuItem?.ImageUrl ?? "images/item-default.png",
                    Quantity = item.Quantity,
                    UnitPrice = item.UnitPrice
                });
            }
        }
    }
    private void CloseModal()
    {
        selectedOrderDetails = null;
    }
    private async Task OpenChat(int orderId, int restaurantId)
    {
        chattingOrderId = orderId;

        // l·∫•y ho·∫∑c t·∫°o conversation
        var conversation = await ChatService.GetConversationByOrderAsync(orderId);
        if (conversation == null) return;

        currentConversationId = conversation.ConversationId;

        // l·∫•y l·ªãch s·ª≠ tin nh·∫Øn
        var msgs = await ChatService.GetMessagesAsync(currentConversationId);
        messages = msgs?.ToList() ?? new();

        // join hub group
        await ChatHubService.StartAsync();
        await ChatHubService.JoinConversation(currentConversationId);
    }

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                var url = await UploadService.UploadImageAsync(file);
                if (!string.IsNullOrEmpty(url))
                {
                    selectedImageUrls.Add(url);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Upload failed: {ex.Message}");
            }
        }
    }
    private void RemoveImage(string imgUrl)
    {
        selectedImageUrls.Remove(imgUrl);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) && !selectedImageUrls.Any())
        return;
        var dto = new CreateMessageRequestDTO
        {
            ConversationId = currentConversationId,
            Content = newMessage,
            SenderId = currentUserId,
            SenderRole = currentUserRole,
            ImageUrls = selectedImageUrls.ToList()
        };
        await ChatHubService.SendMessageAsync(dto);
        newMessage = string.Empty;
        selectedImageUrls.Clear();
    }

    private void CloseChat()
    {
        chattingOrderId = 0;
        chattingRestaurantId = 0;
        messages.Clear();
    }
}
<style>
    .order-card {
        background: #ffffff;
        border-radius: 16px;
        padding: 15px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        border-left: 6px solid #0d6efd;
    }
    .order-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    .order-header {
        border-bottom: 1px solid #eee;
        padding-bottom: 8px;
        margin-bottom: 10px;
    }
    .order-date { font-size: 0.9rem; color: #555; }
    .order-body p { margin: 0; font-size: 0.9rem; color: #333; }
    .status-badge {
        background: #e9f5ff;
        color: #0d6efd;
        padding: 6px 10px;
        border-radius: 8px;
        font-size: 0.85rem;
    }
    .order-footer {
        border-top: 1px solid #f0f0f0;
        padding-top: 10px;
    }
    .chat-messages {
    display: flex;
    flex-direction: column;
    gap: 8px;
    padding: 10px;
}

.messenger-chat {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 320px;
    max-height: 450px; 
    height: 450px;    
    max-height: 450px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    font-family: Arial, sans-serif;
    z-index: 1050;
}

.chat-header {
    background-color: #0084ff;
    color: #fff;
    padding: 6px 10px;
    font-weight: 500;
    font-size: 14px;
}

.chat-messages {
    flex: 1 1 auto;
    overflow-y: auto;   
    padding: 6px 8px;
    display: flex;
    flex-direction: column;
    gap: 6px;
    overflow-y: auto;
}

.chat-message {
    display: flex;
    flex-direction: column;
    width: 100%;
}

.chat-message.mine {
    align-items: flex-end;
}
.bubble {
    display: flex;
    flex-direction: column; /* ch·ªØ v√† time x·∫øp d·ªçc */
    background: #0084ff;
    color: #fff;
    border-radius: 18px 18px 4px 18px;
    padding: 6px 10px;
    max-width: 70%;
    font-size: 13px;
}
.chat-message.mine .bubble {
    background: #0084ff;
    color: #fff;
    border-radius: 18px 18px 4px 18px;
    padding: 6px 10px;
    max-width: 70%;
    font-size: 13px;
    align-items: flex-end;
}

.chat-message.theirs {
    align-items: flex-start;
}

.chat-message.theirs .bubble {
    background: #f1f0f0;
    color: #000;
    border-radius: 18px 18px 18px 4px;
}

.chat-images {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    margin-bottom: 4px; 
}

.chat-img {
    border-radius: 10px;
    cursor: pointer;
    max-width: 120px;
    max-height: 120px;
    object-fit: cover;
    transition: transform 0.2s ease;
}

.chat-img:hover {
    transform: scale(1.05);
}

.chat-text {
    word-wrap: break-word;
}

.bubble .time {
    font-size: 11px;
    color: rgba(255,255,255,0.7);
    text-align: right;
}

.chat-message.theirs .bubble .time {
    color: #555;
}

.chat-input {
    padding: 4px 6px;
    margin-bottom: 10px;
    border-top: 1px solid #eee;
    display: flex;
    gap: 4px;
}

.chat-input input.form-control-sm {
    font-size: 13px;
    margin-bottom: 0;
    padding: 4px 8px;
}

.chat-input button {
    font-size: 13px;
    padding: 4px 10px;
}

.preview-images {
    padding: 4px 6px;
}

.preview-img {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: 6px;
    margin-right: 4px;
    margin-bottom: 4px;
    border: 1px solid #ddd;
}


</style>