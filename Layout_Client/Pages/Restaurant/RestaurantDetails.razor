@page "/restaurant/{id:int}"
@using Layout_Client.Model.DTO
@using Layout_Client.Models.DTO
@using Layout_Client.Models.DTOs
@using Layout_Client.Service
@inject RestaurantService RestaurantService
@inject MenuItemService MenuItemService
@inject CartService CartService
@inject PromoCodeService PromoCodeService
@inject ReviewService ReviewService
@inject UserService UserService
@inject IJSRuntime JS

@inject NavigationManager Navigation

@if (restaurant == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary"></div>
        <p class="mt-2">ƒêang t·∫£i th√¥ng tin nh√† h√†ng...</p>
    </div>
}
else
{
    <div class="container py-4">
        <!-- Header nh√† h√†ng -->
        <div class="bg-light rounded shadow p-4 position-relative mb-5">
            <!-- N√∫t quay l·∫°i -->
                    <button class="btn btn-outline-secondary position-absolute back-btn"
                        style="top: -3rem; left: 0rem;"
                        @onclick='() => Navigation.NavigateTo("/home")'>
                    ‚Üê Quay l·∫°i
                    </button>

            <div class="d-flex flex-wrap align-items-center gap-4">
                <img src="@restaurant.LogoUrl" class="img-fluid rounded shadow" style="max-width: 320px;" />
                <div>
                    <h2 class="fw-bold text-danger">@restaurant.Name</h2>
                    <p class="text-muted mb-1">@restaurant.Description</p>
                    <p><strong class="text-dark">ƒê·ªãa ch·ªâ:</strong> @restaurant.Address</p>
                    <p><strong class="text-dark">ƒêi·ªán tho·∫°i:</strong> @restaurant.PhoneNumber</p>
                    <p><strong class="text-dark">Gi·ªù m·ªü c·ª≠a:</strong> @restaurant.OpeningHours</p>
                    <p>
                    <strong class="text-dark">ƒê√°nh gi√° trung b√¨nh:</strong>
                    <span class="text-warning">
                        @averageRating.ToString("0.0") ‚òÖ
                    </span>
                    </p>
                </div>
            </div>
        </div>
        @if (promoCodes != null && promoCodes.Count > 0)
{
    <div class="mb-4">
        <h4 class="text-primary fw-bold mb-3">
            üéÅ M√£ Gi·∫£m Gi√° ƒê·∫∑c Bi·ªát
        </h4>

        <div class="row g-3">
            @foreach (var promo in promoCodes)
            {
                <div class="col-md-6 col-lg-4 col-xl-3">
                    <div class="border rounded shadow-sm p-3 h-100 bg-light position-relative">
                        <div class="position-absolute top-0 end-0 m-2">
                            @if (promo.IsActive)
                            {
                                <span class="badge bg-success">ƒêang √°p d·ª•ng</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">H·∫øt h·∫°n</span>
                            }
                        </div>

                        <h5 class="text-danger fw-bold">@promo.Code</h5>
                        <p class="mb-1 text-muted">@promo.Description</p>

                        <ul class="list-unstyled small mb-0">
                            @if (promo.Type == PromoCodeType.AmountDiscount)
                            {
                                <li>üí∏ Gi·∫£m: <strong>@promo.DiscountAmount?.ToString("N0") ƒë</strong></li>
                                <li>üßæ ƒê∆°n t·ªëi thi·ªÉu: @promo.MinOrderAmount?.ToString("N0") ƒë</li>
                            }
                            else if (promo.Type == PromoCodeType.QuantityDiscount)
                            {
                                <li>üì¶ Gi·∫£m: <strong>@promo.DiscountPercent?.ToString("0.#")%</strong></li>
                                <li>üçΩÔ∏è SL t·ªëi thi·ªÉu: @promo.MinQuantity m√≥n</li>
                            }

                            <li>üïí @promo.StartDate?.ToString("dd/MM") - @promo.ExpiryDate?.ToString("dd/MM")</li>
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-info mb-4">
        Nh√† h√†ng hi·ªán kh√¥ng c√≥ m√£ gi·∫£m gi√° n√†o ƒëang ho·∫°t ƒë·ªông.
    </div>
}
    
        <!-- nh√† h√†ng -->
        <h4 class="text-primary fw-bold mb-3">
            üçΩÔ∏è M√≥n ƒÇn 
        </h4>
        <!-- B·ªô l·ªçc -->
        <div class="row g-3 mb-4">
            <div class="col-md-5">
                <input class="form-control shadow-sm" @bind="searchTerm" placeholder="üîç T√¨m t√™n m√≥n..." />
            </div>
            <div class="col-md-4">
                <select class="form-select shadow-sm" @bind="selectedCategoryId">
                    <option value="">üìÇ T·∫•t c·∫£ danh m·ª•c</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.CategoryID">@category.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-3 d-grid">
                <button class="btn btn-primary" @onclick="Search">
                    <i class="fas fa-search me-2"></i>T√¨m ki·∫øm
                </button>
            </div>
        </div>

        <!-- Danh s√°ch m√≥n ƒÉn -->
        @if (isLoading)
        {
            <div class="text-center my-5">
                <div class="spinner-border text-primary"></div>
                <p class="mt-2">ƒêang t·∫£i m√≥n ƒÉn...</p>
            </div>
        }
        else if (menuItems == null || menuItems.Count == 0)
        {
            <div class="alert alert-warning text-center">Kh√¥ng c√≥ m√≥n ƒÉn n√†o ph√π h·ª£p.</div>
        }
        else
        {
            <div class="row g-4">
                @foreach (var item in menuItems.Where(m => m.IsAvailable == true))
                {
                    <div class="col-6 col-sm-4 col-md-3 col-lg-2-5">
                        <div class="card border-0 shadow-sm h-100">
                            <img src="@item.ImageUrl" class="card-img-top" style="height: 200px; object-fit: cover;" />
                            <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-primary">@item.Name</h5>
                            <p class="text-muted small flex-grow-1">@item.Description</p>

                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div class="text-danger fw-bold">
                                   @if (item.Price > item.SellingPrice)
                                    {
                                        <span class="text-muted text-decoration-line-through me-1">@item.Price.ToString("N0") ƒë</span>
                                        <span>@item.SellingPrice.ToString("N0") ƒë</span>
                                    }
                                    else
                                    {
                                        <span>@item.SellingPrice.ToString("N0") ƒë</span>
                                    }

                                </div>
                                @if (item.IsAvailable)
                                {
                                    <span class="badge bg-success">C√≤n b√°n</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Ng·ª´ng b√°n</span>
                                }
                            </div>

                            @* ƒê√°nh gi√° sao *@
                            @if (averageRatings.TryGetValue(item.MenuItemID, out var avg) && avg > 0)
                            {
                                <div class="mt-1 small text-warning">
                                    ‚≠ê @avg.ToString("0.0") / 5
                                    <span class="text-muted">(ƒê√£ ƒë√°nh gi√°)</span>
                                </div>
                            }
                            else
                            {
                                <div class="mt-1 small text-muted">
                                    ‚≠ê Ch∆∞a c√≥ ƒë√°nh gi√°
                                </div>
                            }
                            <button class="btn btn-outline-danger btn-sm w-100 mt-auto" @onclick="() => AddToCart(item)">
                                üõí Th√™m v√†o gi·ªè
                            </button>
                        </div>

                        </div>
                    </div>
                }
            </div>

            <nav class="mt-4">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="PreviousPage" disabled="@(currentPage == 1)">‚Üê Tr∆∞·ªõc</button>
                    </li>
                    <li class="page-item disabled">
                        <span class="page-link">Trang @currentPage</span>
                    </li>
                    <li class="page-item @(hasNextPage ? "" : "disabled")">
                        <button class="page-link" @onclick="NextPage" disabled="@(!hasNextPage)">Sau ‚Üí</button>
                    </li>
                </ul>
            </nav>
        }
            <hr class="my-4" />
        <!-- ƒê√°nh gi√° -->
<div class="row g-4 mb-5">
    <!-- ƒê√°nh gi√° nh√† h√†ng -->
    <div class="col-12 col-md-6">
        <div class="bg-white border rounded shadow-sm p-3 h-100">
            <h5 class="text-danger fw-bold mb-3">‚≠ê ƒê√°nh gi√° nh√† h√†ng (@reviews?.Count)</h5>
            <div style="max-height: 500px; overflow-y: auto;">
                @if (reviews == null)
                {
                    <p class="text-muted">ƒêang t·∫£i ƒë√°nh gi√°...</p>
                }
                else if (!reviews.Any())
                {
                    <p class="text-muted">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>
                }
                else
                {
                    @foreach (var r in reviews)
                    {
                        <div class="border rounded p-3 mb-2 bg-light review-card">
                            <div class="d-flex justify-content-between">
                                <strong>@r?.UserName</strong>
                                <span class="text-muted small">@r.ReviewDate.ToString("dd/MM/yyyy")</span>
                            </div>
                            <div class="text-warning mb-1">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="bi @(i <= r.Rating ? "bi-star-fill" : "bi-star")"></i>
                                }
                            </div>
                            <p class="mb-0">@r.Comment</p>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <!-- ƒê√°nh gi√° m√≥n ƒÉn -->
    <div class="col-12 col-md-6">
        <div class="bg-white border rounded shadow-sm p-3 h-100">
            <h5 class="text-danger fw-bold mb-3">üçΩÔ∏è ƒê√°nh gi√° m√≥n ƒÉn (@dishReviews?.Count)</h5>
            <div style="max-height: 500px; overflow-y: auto;">
                @if (dishReviews == null)
                {
                    <p class="text-muted">ƒêang t·∫£i ƒë√°nh gi√° m√≥n ƒÉn...</p>
                }
                else if (!dishReviews.Any())
                {
                    <p class="text-muted">Ch∆∞a c√≥ ƒë√°nh gi√° m√≥n ƒÉn n√†o.</p>
                }
                else
                {
                    @foreach (var r in dishReviews)
                    {
                        var item = menuItems.FirstOrDefault(m => m.MenuItemID == r.MenuItemID);
                        <div class="border rounded p-3 mb-2 bg-light review-card">
                            <div class="d-flex justify-content-between">
                                <strong>@r?.UserName</strong>
                                <span class="text-muted small">@r.ReviewDate.ToString("dd/MM/yyyy")</span>
                            </div>
                            <span class="badge bg-info text-dark mb-2">M√≥n: @item?.Name</span>
                            <div class="text-warning mb-1">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="bi @(i <= r.Rating ? "bi-star-fill" : "bi-star")"></i>
                                }
                            </div>
                            <p class="mb-0">@r.Comment</p>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

    <hr class="my-4" />
    <!-------------------- Vi·∫øt Review ------------------->
    <div class="mt-5">
        <h4 class="text-primary fw-bold mb-3">üìù Vi·∫øt ƒë√°nh gi√°</h4>

    @if (currentUser == null)
    {
        <div class="alert alert-warning">
            Vui l√≤ng <a class="fw-bold" href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ vi·∫øt ƒë√°nh gi√°.
        </div>
    }
    else
    {
        <button class="btn btn-outline-primary" @onclick="() => showReviewOptions = true">
            ‚úçÔ∏è Vi·∫øt ƒë√°nh gi√°
        </button>
    }

    <!-- Modal ch·ªçn lo·∫°i ƒë√°nh gi√° -->
    @if (showReviewOptions)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">Ch·ªçn lo·∫°i ƒë√°nh gi√°</h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body d-grid gap-3">
                        <button class="btn btn-outline-danger" @onclick="ShowRestaurantReviewForm">
                            üè† ƒê√°nh gi√° nh√† h√†ng
                        </button>
                        <button class="btn btn-outline-success" @onclick="ShowDishReviewForm">
                            üçΩÔ∏è ƒê√°nh gi√° m√≥n ƒÉn
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Form ƒë√°nh gi√° -->
    @if (showRestaurantForm || showDishForm)
    {
        <div class="mt-4 border p-4 rounded shadow-sm bg-light">
            <EditForm Model="newReview" OnValidSubmit="SubmitReview">
                <DataAnnotationsValidator />
                <h5 class="fw-bold mb-3">
                    @(showRestaurantForm ? "üè† ƒê√°nh gi√° nh√† h√†ng" : "üçΩÔ∏è ƒê√°nh gi√° m√≥n ƒÉn")
                </h5>

                @if (showDishForm)
                {
                    <div class="mb-3">
                        <label class="form-label">Ch·ªçn m√≥n ƒÉn</label>
                        <InputSelect class="form-select" @bind-Value="newReview.MenuItemID">
                            <option value="">-- Ch·ªçn m√≥n --</option>
                            @foreach (var item in menuItems)
                            {
                                <option value="@item.MenuItemID">@item.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => newReview.MenuItemID)" />
                    </div>
                }

                <div class="mb-3">
                    <label class="form-label">S·ªë sao (1‚Äì5)</label>
                    <InputNumber class="form-control" @bind-Value="newReview.Rating" min="1" max="5" />
                    <ValidationMessage For="@(() => newReview.Rating)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">B√¨nh lu·∫≠n</label>
                    <InputTextArea class="form-control" rows="3" @bind-Value="newReview.Comment" />
                    <ValidationMessage For="@(() => newReview.Comment)" />
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-primary">G·ª≠i ƒë√°nh gi√°</button>
                    <button type="button" class="btn btn-secondary" @onclick="ResetReviewForm">Hu·ª∑</button>
                </div>
            </EditForm>
        </div>
    }
</div>

</div>
}

@code {
    [Parameter] public int id { get; set; }
    private Dictionary<int, double> averageRatings = new(); // MenuItemID -> AverageRating

    private RestaurantResponseDTO? restaurant;
    private List<MenuItemResponseDTO> menuItems = new();
    private List<CategoryResponseDTO> categories = new();
    private List<PromoCodeResponseDTO> promoCodes = new();
    private List<UserResponseDTO> users = new();
    private List<ReviewResponseDTO>? reviews;
    private List<ReviewResponseDTO>? dishReviews;
    private ReviewRequestDTO newReview = new();
    private UserResponseDTO? currentUser;
    private double averageRating = 0;
    private bool showReviewOptions = false;
    private bool showRestaurantForm = false;
    private bool showDishForm = false;
    private string searchTerm = "";
    private int? selectedCategoryId;
    private bool isLoading = true;
    private int currentPage = 1;
    private const int PageSize = 4;
    private bool hasNextPage = false;
    private string? toastMessage;
    private string? toastClass;
    protected override async Task OnInitializedAsync()
    {
        restaurant = await RestaurantService.GetRestaurantByIdAsync(id);
        categories = await MenuItemService.GetCategoriesAsync();
        promoCodes = await PromoCodeService.GetAllPromoCodeAsync(id);
        await LoadMenuItems();
        currentUser = await UserService.GetCurrentUserAsync();
        await LoadReviews();
        averageRating = await ReviewService.GetAverageRatingForRestaurantAsync(id);
        newReview = new()
        {
            RestaurantID = id,
            Rating = 5
        };
    }
    private async Task LoadMenuItems()
    {
        isLoading = true;
        menuItems = await MenuItemService.GetAllMenuItemAsync(id, searchTerm, selectedCategoryId, currentPage, PageSize);
        hasNextPage = menuItems != null && menuItems.Count == PageSize;
        isLoading = false;
        await LoadAverageRatings();
    }
    private async Task AddToCart(MenuItemResponseDTO item)
    {
        var cartItem = new CartItemDTO
        {
            MenuItemID = item.MenuItemID,
            Name = item.Name,
            ImageUrl = item.ImageUrl,
            SellingPrice = item.SellingPrice,
            Quantity = 1,
            RestaurantID = id
        };
        bool added = await CartService.AddToCartAsync(cartItem);
        if (!added)
        {
            bool confirm = await JS.InvokeAsync<bool>("confirm", "B·∫°n ƒëang c√≥ m√≥n ƒÉn t·ª´ nh√† h√†ng kh√°c trong gi·ªè. B·∫°n c√≥ mu·ªën x√≥a gi·ªè h√†ng ƒë·ªÉ th√™m m√≥n m·ªõi?");
            if (confirm)
            {
                await CartService.ClearCartAsync();
                await CartService.AddToCartAsync(cartItem);
                await JS.InvokeVoidAsync("alert", "‚úÖ ƒê√£ th√™m v√†o gi·ªè h√†ng!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "‚ùå Kh√¥ng th·ªÉ th√™m m√≥n t·ª´ nh√† h√†ng kh√°c.");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "‚úÖ ƒê√£ th√™m v√†o gi·ªè h√†ng!");
        }
    }
    private async Task LoadAverageRatings()
    {
        averageRatings.Clear();
        foreach (var item in menuItems)
        {
            var avg = await ReviewService.GetAverageRatingForMenuItemAsync(item.MenuItemID);
            averageRatings[item.MenuItemID] = avg;
        }
    }
    private async Task LoadDishReviews()
    {
        dishReviews = new List<ReviewResponseDTO>();
        foreach (var item in menuItems)
        {
            var reviewsOfDish = await ReviewService.GetReviewsByMenuItemIdAsync(item.MenuItemID);
            if (reviewsOfDish != null)
                dishReviews.AddRange(reviewsOfDish);
        }
    }

    private async Task LoadReviews()
    {
        var allReviews = await ReviewService.GetReviewsByRestaurantIdAsync(id);
        reviews = allReviews.Where(r => r.MenuItemID == null || r.MenuItemID == 0).ToList();
        dishReviews = allReviews.Where(r => r.MenuItemID > 0).ToList();
    }
    private void CloseModal()
    {
        showReviewOptions = false;
        showRestaurantForm = false;
        showDishForm = false;
    }
    private void ShowRestaurantReviewForm()
    {
        showRestaurantForm = true;
        showReviewOptions = false;
        newReview = new()
        {
            RestaurantID = id,
            Rating = 5,
        };
    }
    private void ShowDishReviewForm()
    {
        showDishForm = true;
        showReviewOptions = false;
        newReview = new()
        {
            RestaurantID = id,
            Rating = 5,

        };
    }

    private void ResetReviewForm()
    {
        showRestaurantForm = false;
        showDishForm = false;
    }
    private async Task SubmitReview()
{
    newReview.UserID = currentUser.UserID;
    newReview.RestaurantID = id;

    bool result = false;

    if (showRestaurantForm)
    {
        newReview.MenuItemID = 0;
        result = await ReviewService.CreateRestaurantReviewAsync(newReview);
    }
    else if (showDishForm)
    {
        if (newReview.MenuItemID == null)
        {
            toastMessage = "‚ùå Vui l√≤ng ch·ªçn m√≥n ƒÉn ƒë·ªÉ ƒë√°nh gi√°!";
            toastClass = "bg-danger text-white";
            StateHasChanged();
            return;
        }
        result = await ReviewService.CreateMenuItemReviewAsync(newReview);
    }

    if (result)
    {
        toastMessage = "üéâ ƒê√°nh gi√° th√†nh c√¥ng!";
        toastClass = "bg-success text-white";
        newReview.Comment = "";
        newReview.Rating = 5;

        await LoadReviews(); // reload review nh√† h√†ng
        await LoadMenuItems(); // reload l·∫°i rating trung b√¨nh m√≥n ƒÉn
        await LoadDishReviews();
    }
    else
    {
        toastMessage = "‚ùå ƒê√°nh gi√° th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.";
        toastClass = "bg-danger text-white";
    }

    StateHasChanged();
    await Task.Delay(3000);
    toastMessage = null;
    toastClass = null;
}

    private async Task Search()
    {
        currentPage = 1;
        await LoadMenuItems();
    }
    private async Task NextPage() { currentPage++; await LoadMenuItems(); }
    private async Task PreviousPage() { if (currentPage > 1) { currentPage--; await LoadMenuItems(); } }
}
